//ExportXML.jsx//An InDesign CS6 JavaScript////Shows how to export XML.main();var globalFileName;var selectedDocument;var xmlDocument;var docData;function main(){    docData = new DocumentData();    setup();    tags = new Tags();        readData();        writeXML();}// stuff global document Data in the docData instance of this objectfunction DocumentData(){}// returns the name of the .indd file without the file extensionfunction getFileNameWithoutExtension(fileName){    var pattern = /(.+)\.indd/;    var matchArray = pattern.exec(fileName);    if (matchArray != null && matchArray.length > 1) {        return matchArray[1];    } else {        return fileName;    }}function openDocument(filePath){    var myDocument = app.open(File(filePath), true);//~     //At this point, you could do things with the document without showing the//~     //document window. This can speed up many scripting//~     //operations, and makes it possible for a script to operate//~     //on a file in the background.//~     myAlert ("Document is open but not visible.");//~     //When you want to show the hidden document, create a new window.//~     var myLayoutWindow = myDocument.windows.add();//~     myAlert ("Document is now visible.");    }function setup(){    selectedDocument = app.activeDocument;    if (selectedDocument.saved)        docData.selectedDocPath = selectedDocument.filePath;    else        docData.selectedDocPath = Folder.myDocuments.fullName;    $.writeln("selectedDocPath: " + docData.selectedDocPath);    docData.selectedDocFileName = getFileNameWithoutExtension(selectedDocument.name);    docData.outputFolder = new Folder(Folder.myDocuments.fullName + "/BIP/" + docData.selectedDocFileName);    docData.imagesFolder = new Folder(Folder.myDocuments.fullName + "/BIP/" + docData.selectedDocFileName + "/images");    $.writeln("image folder: " + docData.imagesFolder);    docData.inDesignFileCopy = new File(docData.outputFolder.fullName + "/" + selectedDocument.name);    $.writeln("copy path: " + docData.inDesignFileCopy.fullName);    docData.imagesFolder.create();     // save a copy of the indd document in the output folder don't try and open it yet    selectedDocument.saveACopy(docData.inDesignFileCopy); //   docData.inDesignDocumentCopy = app.open(docData.inDesignFileCopy, true);    globalFileName = selectedDocument.name;}// setup tagsfunction Tags(){    this.xmlDocument = app.documents.add();    this.pageTag = this.xmlDocument.xmlTags.add("page");    this.pageNameTag = this.xmlDocument.xmlTags.add("pageName");    this.lessonTag = this.xmlDocument.xmlTags.add("lesson");    this.questionTag = this.xmlDocument.xmlTags.add("question");    this.questionNumberTag = this.xmlDocument.xmlTags.add("questionNumber");    this.questionContentTag = this.xmlDocument.xmlTags.add("questionContent");    this.lessonNameTag = this.xmlDocument.xmlTags.add("lessonName");    this.textFrameTag = this.xmlDocument.xmlTags.add("textFrame");    this.layerTag = this.xmlDocument.xmlTags.add("layer");    this.layerNameTag = this.xmlDocument.xmlTags.add("layerName");    this.graphicTag = this.xmlDocument.xmlTags.add("graphic");    this.graphicNameTag = this.xmlDocument.xmlTags.add("graphicName");    this.graphicLinkTag = this.xmlDocument.xmlTags.add("graphicLink");    this.imageLinkTag = this.xmlDocument.xmlTags.add("imageLink");    this.myRootXMLElement = this.xmlDocument.xmlElements.item(0);}function QuestionData(index,contents){    this.index = index;    this.contents = contents;}function readData(){    var pages = selectedDocument.pages;    $.writeln('# of pages: ' + pages.length);    for (var x = 0; x < pages.length; x++){          page = pages.item(x);           pageName = page.name;          pageTagToAdd = addPage(pageName);          readPage(pageTagToAdd,page);          exportGraphicLinks(pageTagToAdd,page);    }}function readPage(pageTagToAddTo,page) {    var textFrames = page.textFrames;    $.writeln('# of textFrames: ' + textFrames.length);    for (var x = 0; x < textFrames.length; x++)    {          textFrame = textFrames.item(x);           frameName = textFrame.name;          contents = textFrame.contents;          addTextFrame(pageTagToAddTo,contents);    }}// Not currently using this function everything is in a single Layer so not very usefulfunction exportLayers(parentElement){    var layers = selectedDocument.layers;    for (var x = 0; x < layers.length; x++){      layer = layers.item(x);       layerName = layer.name;      $.writeln("layer name: " + layerName);       var layerElement = parentElement.xmlElements.add(tags.layerTag);      var layerNameTag = layerElement.xmlElements.add(tags.layerNameTag);      layerNameTag.contents = layerName;    }}// Export the links to graphics for the page// parentElement -> the tag to append to in the output XML InDesign Document// page -> the page that we are exporting the graphcs from function exportGraphicLinks(parentElement,page){  var graphics = page.allGraphics;  for (var y = 0; y < graphics.length; y++){    graphic = graphics[y];     var graphicTag = parentElement.xmlElements.add(tags.graphicTag);    var graphicNameTag = graphicTag.xmlElements.add(tags.graphicNameTag);    if (graphic.itemLink != null) {         graphicNameTag.contents = graphic.itemLink.name;        graphicLinkTag = graphicTag.xmlElements.add(tags.graphicLinkTag);        graphicLinkTag.contents = graphic.itemLink.filePath;        // add a reference to the image        imageLinkTag = graphicTag.xmlElements.add(tags.imageLinkTag);        imageLinkTag.contents = "images/" + graphic.itemLink.name + ".png";    }  }}// Export all of the graphics images into a folder in your Documents folder /BIP/InDesign Source File/images folderfunction exportGraphicFiles(){  var graphics = selectedDocument.allGraphics;  var exportOptions = app.pdfExportPresets.item("[Press Quality]");  for (var y = 0; y < graphics.length; y++){    graphic = graphics[y];         if (graphic.itemLink != null) {        var exportFile = new File(docData.imagesFolder + "/" + graphic.itemLink.name + ".png");        $.writeln("export to: " + exportFile.fullName);        if (exportOptions == null) {            $.writeln("SCRIPT ERROR could not find Export Options");            return;        } else {            exportOptions.generateThumbnails = true;            graphic.exportFile(ExportFormat.PNG_FORMAT,exportFile,false,exportOptions);        }    }  }}function findLesson(textContent){    var pattern = /Lesson #(\d+)/;    var matchArray = pattern.exec(textContent);    if (matchArray != null && matchArray.length > 0) { //       $.writeln("lastIndex: ",matchArray.lastIndex);        if (matchArray.length > 1) { //         $.writeln("matchArray[1]: " + matchArray[1]);          return(matchArray[1]);           }    }    return "";}function findQuestions(parentElement,contents){    var pattern = /^\s*(\d+)\./gm;    var patternTwo = /^\s*(\d+)\./gm;    do {        var matchArray = pattern.exec(contents);        var lastMatchedIndex = -1;        if (matchArray != null && matchArray.length > 0) { //           $.writeln("question lastIndex: ",pattern.lastIndex);            lastMatchedIndex = pattern.lastIndex;            var questionContent = "";            if (matchArray.length > 1) { //             $.writeln("matchArray[1]: " + matchArray[1]);              var questionNumber = matchArray[1]; //             $.writeln("questionNumber: " + questionNumber);              patternTwo.lastIndex = pattern.lastIndex;              var nextMatch = patternTwo.exec(contents);              if (nextMatch != null && nextMatch.length > 0) {                if (nextMatch.length > 1) {                    questionContent = contents.substring(lastMatchedIndex,nextMatch.index);                } else {                    questionContent = contents.substring(lastMatchedIndex);                }              } else {                questionContent = contents.substring(lastMatchedIndex);              }            } else {                questionContent = contents.substring(lastMatchedIndex);            }            var questionElement = parentElement.xmlElements.add(tags.questionTag);            var questionNumberTag = questionElement.xmlElements.add(tags.questionNumberTag);            questionNumberTag.contents = questionNumber;            var questionContentTag = questionElement.xmlElements.add(tags.questionContentTag);            questionContentTag.contents = questionContent;        }    } while (matchArray != null);    return "";}function addTextFrame(page,contents){    var lessonNum = findLesson(contents);    if (lessonNum.length) {        parentElement = page.xmlElements.add(tags.lessonTag);        var lessonNameTagLocal = parentElement.xmlElements.add(tags.lessonNameTag);   // add a name tag //       exportLayers(parentElement);        lessonNameTagLocal.contents = lessonNum;        findQuestions(parentElement,contents);    } else {        parentElement = page;        findQuestions(parentElement,contents);    }	var myXMLElement = parentElement.xmlElements.add(tags.textFrameTag);    myXMLElement.contents = contents;}function addPage(name){	var pageTagLocal = tags.myRootXMLElement.xmlElements.add(tags.pageTag);    var pageName = pageTagLocal.xmlElements.add(tags.pageNameTag);    pageName.contents = name;    return pageTagLocal;}function writeXML(){	//<fragment>    activeDoc = app.activeDocument;    var fileName = activeDoc.name;	var myDocument = app.documents.item(0);    if (!selectedDocument.saved) {        $.writeln("doc is NOT saved");    }	//Export the entire XML structure in the document. //   myDocument.exportFile(ExportFormat.xml, File(selectedDocument.fullName + ".xml"));    myDocument.exportFile(ExportFormat.xml, File(docData.outputFolder.fullName + "/" + docData.selectedDocFileName + ".xml"));    exportGraphicFiles();}function myTeardown(){}